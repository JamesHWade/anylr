% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input_wide.R
\name{step_measure_input_wide}
\alias{step_measure_input_wide}
\title{Ingest Measurements in Separate Columns}
\usage{
step_measure_input_wide(
  recipe,
  ...,
  role = "measure",
  trained = FALSE,
  columns = NULL,
  location_values = NULL,
  skip = FALSE,
  id = rand_id("measure_input_wide")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[recipes:selections]{selections()}} for more details.}

\item{role}{Not used by this step since no new variables are
created.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{columns}{A character string of the selected variable names. This field
is a placeholder and will be populated once \code{\link[=prep]{prep()}} is used.}

\item{location_values}{A numeric vector of values that specify the location
of the measurements (e.g., wavelength etc.) in the same order as the variables
selected by \code{...}. If not specified, a sequence of integers (starting at 1L)
is used.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake]{bake()}}? While all operations are baked
when \code{\link[recipes:prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\description{
\code{step_measure_input_wide} creates a \emph{specification} of a recipe
step that converts measures organized in multiple columns into an internal
format used by the package.
}
\details{
This step is designed for data in a format where the analytical measurements
are in separate columns.

\code{step_measure_input_wide()} will collect those data and put them into a
format used internally by this package. The data structure has a row for
each independent experimental unit and a nested tibble with that sample's
measure (measurement and location). It assumes that there are unique
combinations of the other columns in the data that define individual
patterns associated with the pattern. If this is not the case, the special
values might be inappropriately restructured.

The best advice is to have a column of any type that indicates the unique
sample number for each measure. For example, if there are 20 rows in the
input data set, the columns that are \emph{not} analytically measurements show
have no duplicate combinations in the 20 rows.
}
\section{Tidying}{
When you \code{\link[=tidy.recipe]{tidy()}} this step, a tibble indicating which of
the original columns were used to reformat the data.
}

\examples{
data(meats, package = "modeldata")

# Outcome data is to the right
names(meats) \%>\% tail(10)

# ------------------------------------------------------------------------------
# Ingest data without adding the location (i.e. wave number) for the spectra

rec <-
  recipe(water + fat + protein ~ ., data = meats) \%>\%
  step_measure_input_wide(starts_with("x_")) \%>\%
  prep()

summary(rec)

# ------------------------------------------------------------------------------
# Ingest data without adding the location (i.e. wave number) for the spectra

# Make up some locations for the spectra's x-axis
index <- seq(1, 2, length.out = 100)

rec <-
  recipe(water + fat + protein ~ ., data = meats) \%>\%
  step_measure_input_wide(starts_with("x_"), location_values = index) \%>\%
  prep()

summary(rec)
}
\seealso{
\code{\link[=step_measure_input_log]{step_measure_input_log()}}, \code{\link[=step_measure_output_wide]{step_measure_output_wide()}},
\code{\link[=step_measure_output_long]{step_measure_output_long()}}

Other input/output steps: 
\code{\link{step_measure_input_long}()},
\code{\link{step_measure_output_long}()},
\code{\link{step_measure_output_wide}()}
}
\concept{input/output steps}
