% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input_long.R
\name{step_measure_input_long}
\alias{step_measure_input_long}
\title{Ingest Measurements from a Single Column}
\usage{
step_measure_input_long(
  recipe,
  ...,
  location,
  role = "measure",
  trained = FALSE,
  columns = NULL,
  skip = FALSE,
  id = rand_id("measure_input_long")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose which \emph{single} column
contains the analytical measurements. The selection should be in the order
of the measurement's profile.}

\item{location}{One or more selector functions to choose which \emph{single}
column has the locations of the analytical values.}

\item{role}{Not used by this step since no new variables are
created.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{columns}{A character vector of column names determined by the recipe.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake]{bake()}}? While all operations are baked
when \code{\link[recipes:prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\description{
\code{step_measure_input_long} creates a \emph{specification} of a recipe
step that converts measures organized in a column for the analytical results
(and an option column of numeric indices) into an internal format used by
the package.
}
\details{
This step is designed for data in a format where there is a column for the
analytical measurement (e.g., absorption, etc.) and another with the
location of the value (e.g., wave number, etc.).

\code{step_measure_input_long()} will collect those data and put them into a
format used internally by this package. The data structure has a row for
each independent experimental unit and a nested tibble with that sample's
measure (measurement and location). It assumes that there are unique
combinations of the other columns in the data that define individual
patterns associated with the pattern. If this is not the case, the special
values might be inappropriately restructured.

The best advice is to have a column of any type that indicates the unique
sample number for each measure. For example, if there are 200 values in the
measure and 7 samples, the input data (in long format) should have 1,400
rows. We advise having a column with 7 unique values indicating which of the
rows correspond to each sample.
}
\section{Missing Data}{
Currently, \pkg{measure} assumes that there are equal numbers of values
within a sample. If there are missing values in the measurements, you'll
need to pad them with missing values (as opposed to an absent row in the
long format). If not, an error will occur.
}

\section{Tidying}{
When you \code{\link[=tidy.recipe]{tidy()}} this step, a tibble indicating which of
the original columns were used to reformat the data.
}

\seealso{
Other input/output steps: 
\code{\link{step_measure_input_wide}()},
\code{\link{step_measure_output_long}()},
\code{\link{step_measure_output_wide}()}
}
\concept{input/output steps}
